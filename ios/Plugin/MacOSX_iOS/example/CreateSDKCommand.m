//
//  CreateSDKCommand.m
//  Entrust IdentityGuard Mobile SDK
//  Command Line Example
//
//  Copyright (c) 2013 Entrust, Inc. All rights reserved.
//  Use is subject to the terms of the accompanying license agreement. Entrust Confidential.
//

#import "CreateSDKCommand.h"
#import "ETIdentityProvider.h"
#import "ETSoftTokenSDK.h"

/**
 * This command creates a new soft token using either
 * classic activation where the user must type in the
 * serial number and activation code or the online
 * activation model where the user clicks on an
 * activation link generated by Entrust IdentityGuard
 * Self-Service.
 *
 * Note: This application does not handle activation
 * links clicked outside this application.  You must
 * copy and paste the activation link.  A real
 * application that is installed would register for
 * the custom URL scheme, such as igmobileotp://, so
 * it is launched when the user clicks the link. This
 * is not handled in this application because it is
 * intended to be run from Xcode and not installed on
 * the computer.
 */
@implementation CreateSDKCommand

/**
 * Initialize the command.
 * @param app The main application class.
 * @return The initialized instance.
 */
-(id)initWithApp:(SDKCommandLineApp *)theApp
{
    if (self = [super initWithApp:theApp]) {
        name = @"create";
        description = @"Creates a new soft token.";
    }
    return self;
}

/**
 * Performs the command action.
 */
- (void) performCommand
{
    ETIdentity *identity = nil;
    
    while (identity == nil) {
        // We need to create an identity.
        
        printf("You can either perform classic activation where you are prompted\n");
        printf("for a serial number, activation code and optionally a identity\n");
        printf("provider address.  If you provide an identity provider address, the\n");
        printf("soft token will automatically register with Entrust IdentityGuard.\n");
        printf("If you do not provide an address, you will be displayed a registration\n");
        printf("code to type into Entrust IdentityGuard.\n\n");
        
        printf("If you choose online activation, you will be prompted to paste\n");
        printf("the activation link provided by Entrust IdentityGuard Self-Service.\n");
        printf("The application will use the information in the activation link to\n");
        printf("create and register your soft token with Entrust IdentityGuard.\n\n");
        
        BOOL response = [SDKUtils askYesNoQuestion:@"Do you want to perform online activation using an activation link?"];
        if (response) {
            identity = [self doOnlineActivation];
        } else {
            identity = [self doClassicActivation];
        }
    }
    // Set the new identity back into the main application.
    app.identity = identity;
    
    // Write the identity to disk so it can be restored
    // when the application starts again.
    [SDKUtils saveIdentity:identity];
}

/**
 * Returns whether the command is applicable to the
 * current application state.
 * @return YES if the command can be run, NO otherwise.
 */
- (BOOL) isApplicable
{
    return app.identity == nil;
}

/**
 * Perform online activation and return the new soft token identity.
 * @return The new soft token identity.
 */
- (ETIdentity *) doOnlineActivation
{
    printf("To perform online activation, right click and copy\n");
    printf("the activation link that was emailed or displayed\n");
    printf("to you by Entrust IdentityGuard Self-Service Module.\n");
    ETActivationLaunchUrlParams *activationParams = [self promptForActivationLink];
    
    // The registration url contains the location of the config.json file
    // which has the actual Entrust IdentityGuard Self-Service Transaction
    // Component URL.  It also contains branding information that could be
    // used to customize the look of the soft token identity.
    // Note: If you know the location of the Transaction Component URL, you
    // could instead embed that directly into the application and skip this
    // step.
    NSError *fetchError;
    ETConfigurationFile *config = [ETIdentityProvider fetchConfigurationFile:activationParams.registrationUrl callback:nil error:&fetchError];
    if (config == nil) {
        printf("The identity provider configuration could not be fetched from %s.\n", [activationParams.registrationUrl UTF8String]);
        if (fetchError != nil) {
            printf("Error: %s\n", [[fetchError localizedDescription] UTF8String]);
        }
        return nil;
    }
    
    // The transaction url isn't configured.
    if (config.transactionUrl == nil || [config.transactionUrl length] == 0) {
        printf("Identity provider doesn't support registration.\n");
        return nil;
    }
    
    // Perform the registration using the information in the activation link.
    ETIdentityProvider *identityProvider = [[ETIdentityProvider alloc] initWithURLString:activationParams.registrationUrl];
    NSError *createError;
    ETIdentity * tmpIdentity = [identityProvider createIdentityUsingRegPassword:activationParams.registrationPassword serialNumber:activationParams.serialNumber deviceId:@"0" transactions:YES onlineTransactions:YES offlineTransactions:YES notifications:NO callback:nil error:&createError];
    if (tmpIdentity) {
        printf("Online activation has completed successfully.\n");
        
        // Save the transaction url for the next time the app restarts.
        [SDKUtils saveTransactionUrl:activationParams.registrationUrl];
    } else {
        printf("Online activation has failed.\n");
        if (createError) {
            printf("Error: %s\n", [[createError localizedDescription] UTF8String]);
        }
    }
    return tmpIdentity;
}

/**
 * Perform classic activation and return the new soft token identity.
 * @return The new soft token identity.
 */
- (ETIdentity *) doClassicActivation
{
    NSString *serialNumber = [self promptForSerialNumber];
    NSString *activationCode = [self promptForActivationCode];
    
    
    // Both serial number and activation code are valid at this point.
    // That's all that's needed to create a new soft token identity.
    // Note that this generate: method also validates the serial number
    // and activation code, but because they were validated previously
    // this identity generation process will not cause any exceptions
    // to be thrown.
    ETIdentity *tmpIdentity = [ETIdentityProvider generate:nil // Not registering online during this step so don't provide a device ID.
                                              serialNumber:serialNumber
                                            activationCode:activationCode];
    
    BOOL shouldRegister = [SDKUtils askYesNoQuestion:@"Do you want to register this identity with your identity provider?"];
    BOOL didRegister = NO;
    if (shouldRegister) {
        
        // Ask the user for the identity provider address.
        // Note: You could ask for the transaction component URL instead
        // if you don't need branding information.
        // You could also hard code the transaction component URL in your
        // application and skip asking the user for it.
        ETConfigurationFile *config = [SDKUtils promptAndFetchIdentityProviderAddressAndIsOptional:YES];
        if (config != nil) {
            if ([config transactionUrl] != nil) {
                
                // Perform the registration request.
                NSError * regError;
                ETIdentityProvider *identityProvider = [[ETIdentityProvider alloc] initWithURLString:[config transactionUrl]];
                BOOL success = [identityProvider registerIdentity:tmpIdentity deviceId:@"0" transactions:YES onlineTransactions:YES offlineTransactions:YES notifications:NO callback:nil error:&regError];
                if (success) {
                    printf("Registration with identity provider was successful.\n");
                    didRegister = YES;
                    [SDKUtils saveTransactionUrl:config.transactionUrl];
                } else {
                    printf("Registration with identity provider failed.\n");
                    if (regError) {
                        printf("Error: %s\n", [[regError localizedDescription] UTF8String]);
                    }
                }
            } else {
                printf("Identity provider doesn't support registration.\n");
            }
        } else {
            printf("Registration has been skipped.\n");
        }
    }
    
    // If we didn't successfully perform the registration above, show the
    // user the registration code so they can manually register their soft
    // token identity.
    if (!didRegister) {
        NSString *registrationCode = [tmpIdentity registrationCode];
        printf("You must enter this registration code in Entrust IdentityGuard to complete\n");
        printf("activation of the soft token.\n\n");
        printf("Your registration code is: %s\n\n", [registrationCode UTF8String]);
    }
    
    return tmpIdentity;
}

/**
 * Prompt the user for the activation given to them
 * by Entrust IdentityGuard Self-Service. They will need
 * to right click and copy the link.
 */
- (ETActivationLaunchUrlParams *) promptForActivationLink
{
    BOOL linkOk = NO;
    NSString *linkString = nil;
    while (!linkOk) {
        linkString = [SDKUtils promptForString:@"Paste the activation link:" maxLength:300];
        if ([[linkString lowercaseString] isEqualToString:@"exit"]) {
            exit(0);
        }
        NSURL *launchUrl = [NSURL URLWithString:linkString];
        ETLaunchUrlParams *launchParms = [ETSoftTokenSDK parseLaunchUrl:launchUrl];
        if (launchParms == nil || ![launchParms isKindOfClass:[ETActivationLaunchUrlParams class]]) {
            continue;
        }
        return (ETActivationLaunchUrlParams *)launchParms;
    }
    return nil;
}

/**
 * Prompt the user for the soft token serial number 
 * and validate the input.
 * @return The soft token serial number.
 */
- (NSString *) promptForSerialNumber
{
    BOOL serialNumberOk = NO;
    NSString *serialNumberString = nil;
    while (!serialNumberOk) {
        serialNumberString = [SDKUtils promptForString:@"Please enter the soft token serial number:" maxLength:20];
        @try {
            [ETIdentityProvider validateSerialNumber:serialNumberString];
            serialNumberOk = YES;
        } @catch (NSException *e) {
            printf("The serial number %s is not a valid soft token serial number.\n", [serialNumberString UTF8String]);
        }
    }
    return serialNumberString;
}

/**
 * Prompt the user for the soft token activation code
 * and validate the input.
 * @return The soft token activation code.
 */
- (NSString *) promptForActivationCode
{
    BOOL activationCodeOk = NO;
    NSString *activationCodeString = nil;
    while (!activationCodeOk) {
        activationCodeString = [SDKUtils promptForString:@"Please enter the soft token activation code:" maxLength:25];
        @try {
            [ETIdentityProvider validateActivationCode:activationCodeString];
            activationCodeOk = YES;
        } @catch (NSException *e) {
            printf("The code %s is not a valid soft token activation code.\n", [activationCodeString UTF8String]);
        }
    }
    return activationCodeString;
}

@end
